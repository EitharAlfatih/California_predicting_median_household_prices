reticulate::repl_python()
# author: Group 312
# date: 2020-1-23
""" Usage:
scripts/eda.py --train_path=<train_path> --out_folder_path=<out_folder_path>
Options:
--train_path=<train_path> Path (including filename) to find wrangled and split data
--out_folder_path=<out_folder_path> Path to a folder to write outputs to
"""
# Dependencies
import requests
import os
import numpy as np
import pandas as pd
import statsmodels.api as sm
from statsmodels.stats.outliers_influence import variance_inflation_factor
import altair as alt
import selenium
from docopt import docopt
opt = docopt(__doc__)
def main(train_path, out_folder_path):
# Allow Altair to make plots using more than 5000 rows
alt.data_transformers.disable_max_rows()
# Read data from file path
train = pd.read_csv(train_path)
columns = ['housing_median_age', 'total_rooms', 'total_bedrooms', 'population',
'households', 'median_income', 'ocean_proximity', 'latitude', 'longitude']
X_train = train[columns]
y_train = train['median_house_value']
def make_chart(x, x_title):
"""
Creates an altair scatterplot with the input on the x-axis and
the median house value on the y-axis
Parameters
----------
x: string
the column name of the x-axis column to be created
x_title: string
the title of the x-axis (and to be used in the chart title)
Returns
----------
altair chart object
scatterplot of defined x compared to median house value
"""
chart = alt.Chart(viz_data).mark_point(opacity=0.2).encode(
alt.X(x, title=x_title),
alt.Y('median_house_value:Q', title="Median House Value")
).properties(
width=200,
height=200,
title="Median House Value per " + x_title
)
return chart
# Make charts and save them
make_chart('housing_median_age', "House Median Age").save('median-age_scatterplot.png')
make_chart('total_rooms', "Total Rooms").save('total-rooms_scatterplot.png')
make_chart('total_bedrooms', "Total Bedrooms").save('total-bedrooms_scatterplot.png')
make_chart('population', "Population").save('population_scatterplot.png')
make_chart('households', "Households").save('households_scatterplot.png')
make_chart('median_income', "Median Income").save('median-income_scatterplot.png')
# Look at the relationship between total_rooms and total_bedrooms
alt.Chart(viz_data).mark_point(opacity=0.2).encode(
alt.X('total_bedrooms', title="Total Bedrooms"),
alt.Y('total_rooms', title="Total Rooms")
).properties(
width=350,
height=300,
title="Relationship between Bedroom and Room Counts"
).save('total-rooms_total-bedrooms.png')
# Plot correlation matrix for all variables
viz_data = pd.merge(X_train,
y_train,
left_index=True,
right_index=True)
corrMatrix = viz_data.corr()
corrMatrix['names'] = corrMatrix.columns
corrMatrix = corrMatrix.melt(id_vars = 'names',
value_vars = corrMatrix['names'])
# Sources:
# https://campus.datacamp.com/courses/generalized-linear-models-in-python/multivariable-logistic-regression?ex=4
if __name__ == "__main__":
main(train_path = opt["--train_path"], out_folder_path = opt["--out_folder_path"])
# author: Group 312
# date: 2020-1-23
""" Usage:
scripts/eda.py --train_path=<train_path> --out_folder_path=<out_folder_path>
Options:
--train_path=<train_path> Path (including filename) to find wrangled and split data
--out_folder_path=<out_folder_path> Path to a folder to write outputs to
"""
# Dependencies
import requests
import os
import numpy as np
import pandas as pd
import statsmodels.api as sm
from statsmodels.stats.outliers_influence import variance_inflation_factor
import altair as alt
import selenium
from docopt import docopt
opt = docopt(__doc__)
def main(train_path, out_folder_path):
# Allow Altair to make plots using more than 5000 rows
alt.data_transformers.disable_max_rows()
# Read data from file path
train = pd.read_csv(train_path)
columns = ['housing_median_age', 'total_rooms', 'total_bedrooms', 'population',
'households', 'median_income', 'ocean_proximity', 'latitude', 'longitude']
X_train = train[columns]
y_train = train['median_house_value']
def make_chart(x, x_title):
"""
Creates an altair scatterplot with the input on the x-axis and
the median house value on the y-axis
Parameters
----------
x: string
the column name of the x-axis column to be created
x_title: string
the title of the x-axis (and to be used in the chart title)
Returns
----------
altair chart object
scatterplot of defined x compared to median house value
"""
chart = alt.Chart(viz_data).mark_point(opacity=0.2).encode(
alt.X(x, title=x_title),
alt.Y('median_house_value:Q', title="Median House Value")
).properties(
width=200,
height=200,
title="Median House Value per " + x_title
)
return chart
# Make charts and save them
make_chart('housing_median_age', "House Median Age").save('median-age_scatterplot.png')
make_chart('total_rooms', "Total Rooms").save('total-rooms_scatterplot.png')
make_chart('total_bedrooms', "Total Bedrooms").save('total-bedrooms_scatterplot.png')
make_chart('population', "Population").save('population_scatterplot.png')
make_chart('households', "Households").save('households_scatterplot.png')
make_chart('median_income', "Median Income").save('median-income_scatterplot.png')
# Look at the relationship between total_rooms and total_bedrooms
alt.Chart(viz_data).mark_point(opacity=0.2).encode(
alt.X('total_bedrooms', title="Total Bedrooms"),
alt.Y('total_rooms', title="Total Rooms")
).properties(
width=350,
height=300,
title="Relationship between Bedroom and Room Counts"
).save('total-rooms_total-bedrooms.png')
# Sources:
# https://campus.datacamp.com/courses/generalized-linear-models-in-python/multivariable-logistic-regression?ex=4
if __name__ == "__main__":
main(train_path = opt["--train_path"], out_folder_path = opt["--out_folder_path"])
).save('total-rooms_total-bedrooms.png')
# author: Group 312
# date: 2020-1-23
""" Usage:
scripts/eda.py --train_path=<train_path> --out_folder_path=<out_folder_path>
Options:
--train_path=<train_path> Path (including filename) to find wrangled and split data
--out_folder_path=<out_folder_path> Path to a folder to write outputs to
"""
# Dependencies
import requests
import os
import numpy as np
import pandas as pd
import statsmodels.api as sm
from statsmodels.stats.outliers_influence import variance_inflation_factor
import altair as alt
import selenium
from docopt import docopt
opt = docopt(__doc__)
def main(train_path, out_folder_path):
# Allow Altair to make plots using more than 5000 rows
alt.data_transformers.disable_max_rows()
# Read data from file path
train = pd.read_csv(train_path)
columns = ['housing_median_age', 'total_rooms', 'total_bedrooms', 'population',
'households', 'median_income', 'ocean_proximity', 'latitude', 'longitude']
X_train = train[columns]
y_train = train['median_house_value']
def make_chart(x, x_title):
"""
Creates an altair scatterplot with the input on the x-axis and
the median house value on the y-axis
Parameters
----------
x: string
the column name of the x-axis column to be created
x_title: string
the title of the x-axis (and to be used in the chart title)
Returns
----------
altair chart object
scatterplot of defined x compared to median house value
"""
chart = alt.Chart(viz_data).mark_point(opacity=0.2).encode(
alt.X(x, title=x_title),
alt.Y('median_house_value:Q', title="Median House Value")
).properties(
width=200,
height=200,
title="Median House Value per " + x_title
)
return chart
# Make charts and save them
make_chart('housing_median_age', "House Median Age").save('median-age_scatterplot.png')
make_chart('total_rooms', "Total Rooms").save('total-rooms_scatterplot.png')
make_chart('total_bedrooms', "Total Bedrooms").save('total-bedrooms_scatterplot.png')
make_chart('population', "Population").save('population_scatterplot.png')
make_chart('households', "Households").save('households_scatterplot.png')
make_chart('median_income', "Median Income").save('median-income_scatterplot.png')
# Look at the relationship between total_rooms and total_bedrooms
alt.Chart(X_train).mark_point(opacity=0.2).encode(
alt.X('total_bedrooms', title="Total Bedrooms"),
alt.Y('total_rooms', title="Total Rooms")
).properties(
width=350,
height=300,
title="Relationship between Bedroom and Room Counts"
).save('total-rooms_total-bedrooms.png')
# Sources:
# https://campus.datacamp.com/courses/generalized-linear-models-in-python/multivariable-logistic-regression?ex=4
if __name__ == "__main__":
main(train_path = opt["--train_path"], out_folder_path = opt["--out_folder_path"])
chart = alt.Chart(train).mark_point(opacity=0.2).encode(
# author: Group 312
# date: 2020-1-23
""" Usage:
scripts/eda_v2.py --train_path=<train_path> --out_folder_path=<out_folder_path>
Options:
--train_path=<train_path> Path (including filename) to find wrangled and split data
--out_folder_path=<out_folder_path> Path to a folder to write outputs to
"""
# Dependencies
import requests
import os
import numpy as np
import pandas as pd
import statsmodels.api as sm
from statsmodels.stats.outliers_influence import variance_inflation_factor
import altair as alt
import selenium
from docopt import docopt
opt = docopt(__doc__)
def main(train_path, out_folder_path):
# Allow Altair to make plots using more than 5000 rows
alt.data_transformers.disable_max_rows()
# Read data from file path
train = pd.read_csv(train_path)
columns = ['housing_median_age', 'total_rooms', 'total_bedrooms', 'population',
'households', 'median_income', 'ocean_proximity', 'latitude', 'longitude']
X_train = train[columns]
y_train = train['median_house_value']
def make_chart(x, x_title):
"""
Creates an altair scatterplot with the input on the x-axis and
the median house value on the y-axis
Parameters
----------
x: string
the column name of the x-axis column to be created
x_title: string
the title of the x-axis (and to be used in the chart title)
Returns
----------
altair chart object
scatterplot of defined x compared to median house value
"""
chart = alt.Chart(train).mark_point(opacity=0.2).encode(
alt.X(x, title=x_title),
alt.Y('median_house_value:Q', title="Median House Value")
).properties(
width=200,
height=200,
title="Median House Value per " + x_title
)
return chart
# Make charts and save them
make_chart('housing_median_age', "House Median Age").save('median-age_scatterplot.png')
make_chart('total_rooms', "Total Rooms").save('total-rooms_scatterplot.png')
make_chart('total_bedrooms', "Total Bedrooms").save('total-bedrooms_scatterplot.png')
make_chart('population', "Population").save('population_scatterplot.png')
make_chart('households', "Households").save('households_scatterplot.png')
make_chart('median_income', "Median Income").save('median-income_scatterplot.png')
# Look at the relationship between total_rooms and total_bedrooms
alt.Chart(X_train).mark_point(opacity=0.2).encode(
alt.X('total_bedrooms', title="Total Bedrooms"),
alt.Y('total_rooms', title="Total Rooms")
).properties(
width=350,
height=300,
title="Relationship between Bedroom and Room Counts"
).save('total-rooms_total-bedrooms.png')
# Sources:
# https://campus.datacamp.com/courses/generalized-linear-models-in-python/multivariable-logistic-regression?ex=4
if __name__ == "__main__":
main(train_path = opt["--train_path"], out_folder_path = opt["--out_folder_path"])
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggfortify))
suppressPackageStartupMessages(library(survival))
suppressPackageStartupMessages(library(repr))
suppressPackageStartupMessages(library(broom))
lung <- lung
lung <- lung %>% select(ph.ecog, age, time, status) %>%
drop_na() %>%
filter(ph.ecog != 3)
km_est <- survfit(Surv(time, status) ~ 1, data = lung)
wb_est <- survreg(Surv(time, status) ~ 1, dist = 'weibull', data = lung)
data <- tibble(x = seq(0, 1022, 1)) %>%
mutate(surv = pweibull(q = x, shape = 1/wb_est$scale, scale = exp(wb_est$icoef[1]), lower.tail = FALSE))
1/wb_est$scale
autoplot(km_est) +
geom_line(data = data, aes(x = x, y = surv), colour="red") +
labs(x = "Time", y = "Survival Rate", title = )
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggfortify))
suppressPackageStartupMessages(library(survival))
suppressPackageStartupMessages(library(repr))
suppressPackageStartupMessages(library(broom))
lung <- lung
lung <- lung %>% select(ph.ecog, age, time, status) %>%
drop_na() %>%
filter(ph.ecog != 3)
km_est <- survfit(Surv(time, status) ~ 1, data = lung)
wb_est <- survreg(Surv(time, status) ~ 1, dist = 'weibull', data = lung)
data <- tibble(x = seq(0, 1022, 1)) %>%
mutate(surv = pweibull(q = x, shape = 1/wb_est$scale, scale = exp(wb_est$icoef[1]), lower.tail = FALSE))
exp(wb_est$icoef[1])
autoplot(km_est) +
geom_line(data = data, aes(x = x, y = surv), colour="red") +
labs(x = "Time", y = "Survival Rate", title = )
lung <- lung %>% select(ph.ecog, age, time, status) %>%
drop_na() %>%
filter(ph.ecog != 3)
km_est <- survfit(Surv(time, status) ~ 1, data = lung)
wb_est <- survreg(Surv(time, status) ~ 1, dist = 'weibull', data = lung)
data <- tibble(x = seq(0, 1022, 1)) %>%
mutate(surv = pweibull(q = x, shape = 1/wb_est$scale, scale = exp(wb_est$icoef[1]), lower.tail = FALSE))
exp(wb_est$icoef[1])
autoplot(km_est) +
geom_line(data = data, aes(x = x, y = surv), colour="red") +
labs(x = "Time", y = "Survival Rate", title = "Hello")
setwd("~/Documents/MDS/DSCI_522/DSCI_522_GROUP_312")
checkFileExists(data/train.csv)
library(checkmate)
checkFileExists(data/train.csv)
checkFileExists("data/train.csv")
str(x)
str(4)
toString(4)
checkFileExists(toString(data/train.csv))
toString(x)
checkFileExists(text(data/train.csv))
checkFileExists(parse(data/train.csv))
typeof(checkFileExists("data/train.csv"))
identical(checkFileExists("data/train.csv"), TRUE)
